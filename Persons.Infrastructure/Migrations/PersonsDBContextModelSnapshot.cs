// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persons.Infrastructure;

#nullable disable

namespace Persons.Infrastructure.Migrations
{
    [DbContext(typeof(PersonsDBContext))]
    partial class PersonsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessEntityAdresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("BussinessEntitityCreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("771e40ed-a8ba-40b1-80d0-2d33c0637664"),
                            Code = "DE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(743),
                            Name = "Germany",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(747)
                        },
                        new
                        {
                            Id = new Guid("f9cbe5e8-1e68-46d9-a920-d3b79b354e40"),
                            Code = "FR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(751),
                            Name = "France",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(752)
                        },
                        new
                        {
                            Id = new Guid("cb854fe4-23ed-41f6-8579-46cd40be8aed"),
                            Code = "IT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(754),
                            Name = "Italy",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(755)
                        },
                        new
                        {
                            Id = new Guid("c30e50c9-d6ab-47c1-87bb-5636debba263"),
                            Code = "ES",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(757),
                            Name = "Spain",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(757)
                        },
                        new
                        {
                            Id = new Guid("051c10f8-982b-4bcf-b27e-9d05d03db726"),
                            Code = "PT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(759),
                            Name = "Portugal",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(759)
                        },
                        new
                        {
                            Id = new Guid("a04ea6e9-d4a0-42f1-9c0e-96c5f374c15b"),
                            Code = "NL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(761),
                            Name = "Netherlands",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(761)
                        },
                        new
                        {
                            Id = new Guid("ec4169e2-4a22-4efe-aebe-d962451fb826"),
                            Code = "BE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(763),
                            Name = "Belgium",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(763)
                        },
                        new
                        {
                            Id = new Guid("0cbc9195-9aa7-48d0-b357-20678d668f6a"),
                            Code = "LU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(776),
                            Name = "Luxembourg",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(777)
                        },
                        new
                        {
                            Id = new Guid("4e545cc7-f094-4f48-8140-157fddd54fb3"),
                            Code = "AT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(778),
                            Name = "Austria",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(779)
                        },
                        new
                        {
                            Id = new Guid("a573a06a-d02d-4a1d-812a-d581cc173834"),
                            Code = "CH",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(780),
                            Name = "Switzerland",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(781)
                        },
                        new
                        {
                            Id = new Guid("cbf5806c-5b60-49ce-8556-1f62ba6eaff3"),
                            Code = "PL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(782),
                            Name = "Poland",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(783)
                        },
                        new
                        {
                            Id = new Guid("2b94fc8c-acd1-46b4-9cfb-06bd97194009"),
                            Code = "CZ",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(785),
                            Name = "Czech Republic",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(786)
                        },
                        new
                        {
                            Id = new Guid("41c32295-5990-4a6e-8465-18a3238e5ed0"),
                            Code = "HU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(787),
                            Name = "Hungary",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(788)
                        },
                        new
                        {
                            Id = new Guid("3044bf4b-8976-44dc-b438-7cfed22b4d88"),
                            Code = "SK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(789),
                            Name = "Slovakia",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(790)
                        },
                        new
                        {
                            Id = new Guid("b7bba672-d731-48e5-8e91-772e63f2a646"),
                            Code = "SI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(791),
                            Name = "Slovenia",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(792)
                        },
                        new
                        {
                            Id = new Guid("edf0f16f-1f72-42fc-acc0-256eb0203ddf"),
                            Code = "HR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(796),
                            Name = "Croatia",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(796)
                        },
                        new
                        {
                            Id = new Guid("605fea65-efb3-4599-9c56-9d73aa2c7002"),
                            Code = "RS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(798),
                            Name = "Serbia",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(798)
                        },
                        new
                        {
                            Id = new Guid("ab5c637e-b487-40a1-8d97-87c6be6f9c59"),
                            Code = "BA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(801),
                            Name = "Bosnia and Herzegovina",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(801)
                        },
                        new
                        {
                            Id = new Guid("ddfba93c-29ad-43d7-9896-5bc89b18f59c"),
                            Code = "ME",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(802),
                            Name = "Montenegro",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(803)
                        },
                        new
                        {
                            Id = new Guid("4dda6f5d-91dd-41b3-8e99-ffc176ceb592"),
                            Code = "XK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(805),
                            Name = "Kosovo",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(806)
                        },
                        new
                        {
                            Id = new Guid("b9b2a233-bd53-4888-a4c2-bffd6b8fbb20"),
                            Code = "MK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(808),
                            Name = "North Macedonia",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(808)
                        },
                        new
                        {
                            Id = new Guid("56b971be-6365-4675-96ec-2d8581e8634a"),
                            Code = "AL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(809),
                            Name = "Albania",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(811)
                        },
                        new
                        {
                            Id = new Guid("7fddc8dc-39bf-488c-9e7c-56803fa8fb34"),
                            Code = "GR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(814),
                            Name = "Greece",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(815)
                        },
                        new
                        {
                            Id = new Guid("e26976ed-cc3a-41f9-bde8-962a65e2ac85"),
                            Code = "BG",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(818),
                            Name = "Bulgaria",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(819)
                        },
                        new
                        {
                            Id = new Guid("147110fc-1555-4a89-9464-28d842251dae"),
                            Code = "RO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(830),
                            Name = "Romania",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(830)
                        },
                        new
                        {
                            Id = new Guid("adf21309-65f4-43a8-972b-0e3423a70b25"),
                            Code = "TR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(869),
                            Name = "Turkey",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(869)
                        },
                        new
                        {
                            Id = new Guid("f7208b1d-bc46-4cd5-aa18-c6906fdf29c2"),
                            Code = "UA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(871),
                            Name = "Ukraine",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(872)
                        },
                        new
                        {
                            Id = new Guid("58853c1a-8339-45ec-bf8c-01430ca0389d"),
                            Code = "BY",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(874),
                            Name = "Belarus",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(874)
                        },
                        new
                        {
                            Id = new Guid("24055fdd-b991-4a52-81f5-ab1d5fb16b6b"),
                            Code = "LT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(877),
                            Name = "Lithuania",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(877)
                        },
                        new
                        {
                            Id = new Guid("47451089-23ba-4754-9f55-40ed919c9a9a"),
                            Code = "LV",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(879),
                            Name = "Latvia",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(879)
                        },
                        new
                        {
                            Id = new Guid("7c086eb6-ac0c-47f8-8a24-1bc91569679b"),
                            Code = "EE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(905),
                            Name = "Estonia",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(905)
                        },
                        new
                        {
                            Id = new Guid("8cad0ee9-2ce3-4ca2-aecd-a621323dc1eb"),
                            Code = "FI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(910),
                            Name = "Finland",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(911)
                        },
                        new
                        {
                            Id = new Guid("8e31d22a-daed-4de0-8ced-4a802b00189f"),
                            Code = "SE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(914),
                            Name = "Sweden",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(915)
                        },
                        new
                        {
                            Id = new Guid("7d696bef-dba0-47bb-b777-12f60ab669ca"),
                            Code = "NO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(917),
                            Name = "Norway",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(918)
                        },
                        new
                        {
                            Id = new Guid("4d420b60-8c89-488a-ac88-16a58767a545"),
                            Code = "DK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(920),
                            Name = "Denmark",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(921)
                        },
                        new
                        {
                            Id = new Guid("440aaa19-e9ce-46b3-8abf-d68f40c0a645"),
                            Code = "IS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(923),
                            Name = "Iceland",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(923)
                        },
                        new
                        {
                            Id = new Guid("43db4e9c-52aa-43e6-8f7d-58a8f66d7ddc"),
                            Code = "GB",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(925),
                            Name = "United Kingdom",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(925)
                        },
                        new
                        {
                            Id = new Guid("283e2a17-548f-4c2d-bdb9-6fbb749476c6"),
                            Code = "IE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(928),
                            Name = "Ireland",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 49, 54, 276, DateTimeKind.Utc).AddTicks(928)
                        });
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BussinessEntityCreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmailAddressPromotion")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Address", "Address")
                        .WithMany("Adresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Adresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.HasOne("Persons.Domain.Domain.CreditCard", "CreditCard")
                        .WithOne("BussinessEntitityCreditCard")
                        .HasForeignKey("Persons.Domain.Domain.BussinessEntitityCreditCard", "CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("CreditCards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithOne("EmailAddress")
                        .HasForeignKey("Persons.Domain.Domain.EmailAddress", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Passwords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Navigation("BussinessEntitityCreditCard")
                        .IsRequired();
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("CreditCards");

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("Passwords");
                });
#pragma warning restore 612, 618
        }
    }
}
