// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persons.Infrastructure;

#nullable disable

namespace Persons.Infrastructure.Migrations
{
    [DbContext(typeof(PersonsDBContext))]
    [Migration("20240717121902_AddedEmailUnique")]
    partial class AddedEmailUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessEntityAdresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("BussinessEntitityCreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("860fadc9-11eb-46b9-a7a6-6a05a1392532"),
                            Code = "DE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8828),
                            Name = "Germany",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8832)
                        },
                        new
                        {
                            Id = new Guid("b09b8094-d3b5-42a9-b5f1-876d72b144de"),
                            Code = "FR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8836),
                            Name = "France",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8837)
                        },
                        new
                        {
                            Id = new Guid("2355ba89-9338-4060-aba0-0b85de5e13af"),
                            Code = "IT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8840),
                            Name = "Italy",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8840)
                        },
                        new
                        {
                            Id = new Guid("0245f0a5-3c9c-4dc3-ae5e-411aa9231861"),
                            Code = "ES",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8842),
                            Name = "Spain",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8843)
                        },
                        new
                        {
                            Id = new Guid("2e84c99d-8eef-4eb8-934b-b2073c35838b"),
                            Code = "PT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8855),
                            Name = "Portugal",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8856)
                        },
                        new
                        {
                            Id = new Guid("f4506af9-da77-4fd9-92be-542311cefbb4"),
                            Code = "NL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8858),
                            Name = "Netherlands",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8859)
                        },
                        new
                        {
                            Id = new Guid("d0d1edfc-e09a-4d1e-87c6-a9c214fc26bf"),
                            Code = "BE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8861),
                            Name = "Belgium",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8861)
                        },
                        new
                        {
                            Id = new Guid("dcca438e-156e-4152-b8b6-89be6174c58b"),
                            Code = "LU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8863),
                            Name = "Luxembourg",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8864)
                        },
                        new
                        {
                            Id = new Guid("869d9276-370d-4e26-a370-fd219f9fdd5e"),
                            Code = "AT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8866),
                            Name = "Austria",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8867)
                        },
                        new
                        {
                            Id = new Guid("6dea4d3b-557a-4dc5-adeb-496ae03ce744"),
                            Code = "CH",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8870),
                            Name = "Switzerland",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8870)
                        },
                        new
                        {
                            Id = new Guid("0731548a-3f90-4aaf-a1bc-57874f3ea69e"),
                            Code = "PL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8872),
                            Name = "Poland",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8873)
                        },
                        new
                        {
                            Id = new Guid("8b1ef79c-ab8d-41d2-8c25-fb356d00bbcb"),
                            Code = "CZ",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8875),
                            Name = "Czech Republic",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8875)
                        },
                        new
                        {
                            Id = new Guid("a3bb9b89-961e-4e31-a0a3-bd1fc4b6af13"),
                            Code = "HU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8880),
                            Name = "Hungary",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8881)
                        },
                        new
                        {
                            Id = new Guid("7ec56ad0-95a4-4915-80bf-33a161c0d9a8"),
                            Code = "SK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8883),
                            Name = "Slovakia",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8883)
                        },
                        new
                        {
                            Id = new Guid("70f1f750-f80a-48ec-99ab-856cf48b8ff3"),
                            Code = "SI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8885),
                            Name = "Slovenia",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8886)
                        },
                        new
                        {
                            Id = new Guid("1d9a9a08-49df-4b2c-ac92-28e9ac899345"),
                            Code = "HR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8888),
                            Name = "Croatia",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8888)
                        },
                        new
                        {
                            Id = new Guid("646472bd-4ddb-4d43-a6ee-2e1ffaad7c39"),
                            Code = "RS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8890),
                            Name = "Serbia",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8891)
                        },
                        new
                        {
                            Id = new Guid("0a1c8607-6c62-46fc-af41-0ce343efa869"),
                            Code = "BA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8892),
                            Name = "Bosnia and Herzegovina",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8893)
                        },
                        new
                        {
                            Id = new Guid("b494a40f-5be9-4aff-a313-ca9ef84e5892"),
                            Code = "ME",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8895),
                            Name = "Montenegro",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8895)
                        },
                        new
                        {
                            Id = new Guid("27a8534c-8621-4dfe-af57-e8ac879968ff"),
                            Code = "XK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8897),
                            Name = "Kosovo",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8897)
                        },
                        new
                        {
                            Id = new Guid("64564d2f-e19c-43ed-8fb8-34f8ac487f3b"),
                            Code = "MK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8901),
                            Name = "North Macedonia",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8902)
                        },
                        new
                        {
                            Id = new Guid("0030d580-b35c-419b-9c5f-97e4d7fb7c15"),
                            Code = "AL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8904),
                            Name = "Albania",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8904)
                        },
                        new
                        {
                            Id = new Guid("2794bdcd-e04e-400b-99d0-57d79287f6c1"),
                            Code = "GR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8906),
                            Name = "Greece",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8907)
                        },
                        new
                        {
                            Id = new Guid("f47602a3-74a9-4791-8a6b-5963aad87014"),
                            Code = "BG",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8909),
                            Name = "Bulgaria",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8910)
                        },
                        new
                        {
                            Id = new Guid("65f67b00-4ba8-4f81-86c9-36efe2f6e793"),
                            Code = "RO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8912),
                            Name = "Romania",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8912)
                        },
                        new
                        {
                            Id = new Guid("1f979e39-06a9-4ceb-9287-4e02d787e671"),
                            Code = "TR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8914),
                            Name = "Turkey",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8915)
                        },
                        new
                        {
                            Id = new Guid("8fdf6c95-2975-48b2-aa2f-4a9208a5098d"),
                            Code = "UA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8917),
                            Name = "Ukraine",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8917)
                        },
                        new
                        {
                            Id = new Guid("28336fcd-ed72-4476-b63d-d0e3abbe40c0"),
                            Code = "BY",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8919),
                            Name = "Belarus",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8920)
                        },
                        new
                        {
                            Id = new Guid("bcb208e1-0ede-4e0f-a30f-37139e0d0e35"),
                            Code = "LT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8923),
                            Name = "Lithuania",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8924)
                        },
                        new
                        {
                            Id = new Guid("dafc5e99-cb59-4f24-9309-93b92c2b167a"),
                            Code = "LV",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8926),
                            Name = "Latvia",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8926)
                        },
                        new
                        {
                            Id = new Guid("0c4985c4-fd13-40e8-8aeb-681dc30a33d9"),
                            Code = "EE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8928),
                            Name = "Estonia",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8929)
                        },
                        new
                        {
                            Id = new Guid("27e077a7-59b8-4529-93c5-c6a248096503"),
                            Code = "FI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8930),
                            Name = "Finland",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8931)
                        },
                        new
                        {
                            Id = new Guid("1219c431-9a2f-4010-9628-d8dca8efdfa0"),
                            Code = "SE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8933),
                            Name = "Sweden",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8933)
                        },
                        new
                        {
                            Id = new Guid("8f0ab2d0-f103-4a6e-aa73-e8194570cfb2"),
                            Code = "NO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8935),
                            Name = "Norway",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8935)
                        },
                        new
                        {
                            Id = new Guid("f91ae38e-6260-406c-932f-b09bc40877c3"),
                            Code = "DK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8937),
                            Name = "Denmark",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8938)
                        },
                        new
                        {
                            Id = new Guid("0deca6d8-0838-4485-b964-b9a47b1945b9"),
                            Code = "IS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8939),
                            Name = "Iceland",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8940)
                        },
                        new
                        {
                            Id = new Guid("7a319f2b-495d-489e-9798-eefd435acc28"),
                            Code = "GB",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8944),
                            Name = "United Kingdom",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8944)
                        },
                        new
                        {
                            Id = new Guid("dd12dd09-57b5-42d1-9a78-dd60b383266d"),
                            Code = "IE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8946),
                            Name = "Ireland",
                            UpdatedAt = new DateTime(2024, 7, 17, 12, 19, 1, 205, DateTimeKind.Utc).AddTicks(8947)
                        });
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BussinessEntityCreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmailAddressPromotion")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Address", "Address")
                        .WithMany("Adresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Adresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.HasOne("Persons.Domain.Domain.CreditCard", "CreditCard")
                        .WithOne("BussinessEntitityCreditCard")
                        .HasForeignKey("Persons.Domain.Domain.BussinessEntitityCreditCard", "CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("CreditCards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithOne("EmailAddress")
                        .HasForeignKey("Persons.Domain.Domain.EmailAddress", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Passwords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Navigation("BussinessEntitityCreditCard")
                        .IsRequired();
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("CreditCards");

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("Passwords");
                });
#pragma warning restore 612, 618
        }
    }
}
