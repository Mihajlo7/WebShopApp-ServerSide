// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persons.Infrastructure;

#nullable disable

namespace Persons.Infrastructure.Migrations
{
    [DbContext(typeof(PersonsDBContext))]
    [Migration("20240708113930_AddedCountriesOnDatabases")]
    partial class AddedCountriesOnDatabases
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessEntityAdresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("BussinessEntitityCreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("510f0d45-7f30-42cf-8c86-23555bfdb062"),
                            Code = "DE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9060),
                            Name = "Germany",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9063)
                        },
                        new
                        {
                            Id = new Guid("dfee7b37-cabc-4bb9-9f34-fd7775a24ce4"),
                            Code = "FR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9077),
                            Name = "France",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9078)
                        },
                        new
                        {
                            Id = new Guid("ca4ca9ac-ab2d-4cc5-9df0-b21bc160869a"),
                            Code = "IT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9081),
                            Name = "Italy",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9081)
                        },
                        new
                        {
                            Id = new Guid("ca9e90e6-1cd2-4af7-ae5c-f639a49d216b"),
                            Code = "ES",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9083),
                            Name = "Spain",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9084)
                        },
                        new
                        {
                            Id = new Guid("260812c2-13fe-4e25-baaf-331cfc2e5a3c"),
                            Code = "PT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9086),
                            Name = "Portugal",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9086)
                        },
                        new
                        {
                            Id = new Guid("8fff77af-8b82-45f5-922a-bf3251618e2e"),
                            Code = "NL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9088),
                            Name = "Netherlands",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9089)
                        },
                        new
                        {
                            Id = new Guid("c0b9ae96-5503-45bf-adc5-2fea34106dcb"),
                            Code = "BE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9091),
                            Name = "Belgium",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9091)
                        },
                        new
                        {
                            Id = new Guid("70daeae1-7521-40b3-a5de-4cb5c45c6c7a"),
                            Code = "LU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9093),
                            Name = "Luxembourg",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9094)
                        },
                        new
                        {
                            Id = new Guid("2d87c895-e6bd-474c-b52c-7dd641ad31c3"),
                            Code = "AT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9095),
                            Name = "Austria",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9096)
                        },
                        new
                        {
                            Id = new Guid("1bc7f8e9-4383-438a-a00d-ecfda3531ede"),
                            Code = "CH",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9100),
                            Name = "Switzerland",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9101)
                        },
                        new
                        {
                            Id = new Guid("80276af8-bf72-43ae-9421-91aa41d2c580"),
                            Code = "PL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9102),
                            Name = "Poland",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9103)
                        },
                        new
                        {
                            Id = new Guid("49ba6fff-9c83-474c-bb6d-fd425712ecb1"),
                            Code = "CZ",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9105),
                            Name = "Czech Republic",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9105)
                        },
                        new
                        {
                            Id = new Guid("61076fe8-8815-47fa-be7d-49fcd81afe79"),
                            Code = "HU",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9107),
                            Name = "Hungary",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9107)
                        },
                        new
                        {
                            Id = new Guid("fc19ec95-7b96-4821-a590-9808f1053ff1"),
                            Code = "SK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9109),
                            Name = "Slovakia",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9110)
                        },
                        new
                        {
                            Id = new Guid("9940d27b-1544-4efe-8765-5a217d920191"),
                            Code = "SI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9111),
                            Name = "Slovenia",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9112)
                        },
                        new
                        {
                            Id = new Guid("96ab5910-b083-4abc-b022-8e6b70568364"),
                            Code = "HR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9114),
                            Name = "Croatia",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9114)
                        },
                        new
                        {
                            Id = new Guid("0082ebd0-cb4b-43cc-923b-bf05c0979c16"),
                            Code = "RS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9116),
                            Name = "Serbia",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9116)
                        },
                        new
                        {
                            Id = new Guid("653686de-6c7d-4893-bdba-f3028c49d411"),
                            Code = "BA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9120),
                            Name = "Bosnia and Herzegovina",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9120)
                        },
                        new
                        {
                            Id = new Guid("02c7465a-07d3-4966-a546-1318060ebccb"),
                            Code = "ME",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9122),
                            Name = "Montenegro",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9123)
                        },
                        new
                        {
                            Id = new Guid("bb1229e2-e50f-4c31-bc99-e53df6bb89a7"),
                            Code = "XK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9124),
                            Name = "Kosovo",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9125)
                        },
                        new
                        {
                            Id = new Guid("ec635e29-634d-4d61-88d3-0a4c5f3c9ade"),
                            Code = "MK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9127),
                            Name = "North Macedonia",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9127)
                        },
                        new
                        {
                            Id = new Guid("c14444fb-d674-4120-9311-082ae781e178"),
                            Code = "AL",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9129),
                            Name = "Albania",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9129)
                        },
                        new
                        {
                            Id = new Guid("6354dbb6-054b-487d-9b5b-2b586cccc613"),
                            Code = "GR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9131),
                            Name = "Greece",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9131)
                        },
                        new
                        {
                            Id = new Guid("6f8987d8-f0b6-41f6-b72b-e78a21b24b8d"),
                            Code = "BG",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9133),
                            Name = "Bulgaria",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9133)
                        },
                        new
                        {
                            Id = new Guid("7c38fd4e-a529-48c8-8b2a-e7422b105984"),
                            Code = "RO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9135),
                            Name = "Romania",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9136)
                        },
                        new
                        {
                            Id = new Guid("d2792a79-10cf-41c8-a919-3a72d81d7bc1"),
                            Code = "TR",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9139),
                            Name = "Turkey",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9139)
                        },
                        new
                        {
                            Id = new Guid("5c886ed8-e899-4399-83c4-778afd005344"),
                            Code = "UA",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9141),
                            Name = "Ukraine",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9142)
                        },
                        new
                        {
                            Id = new Guid("ddd5b4d2-cbf2-438b-8d43-0099c02269ca"),
                            Code = "BY",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9143),
                            Name = "Belarus",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9144)
                        },
                        new
                        {
                            Id = new Guid("e8743957-f433-4841-99bb-7ec841971f3c"),
                            Code = "LT",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9146),
                            Name = "Lithuania",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9146)
                        },
                        new
                        {
                            Id = new Guid("73f2d800-9b7f-4f3c-995d-5e25c575627d"),
                            Code = "LV",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9148),
                            Name = "Latvia",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9148)
                        },
                        new
                        {
                            Id = new Guid("869d522f-5e78-4fe1-8f24-24f009ad6e98"),
                            Code = "EE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9150),
                            Name = "Estonia",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9151)
                        },
                        new
                        {
                            Id = new Guid("a1c942b2-6dba-482f-a165-51ca5fa8a913"),
                            Code = "FI",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9153),
                            Name = "Finland",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9153)
                        },
                        new
                        {
                            Id = new Guid("683e2142-d8b7-424d-ad63-f28b26b83991"),
                            Code = "SE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9155),
                            Name = "Sweden",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9155)
                        },
                        new
                        {
                            Id = new Guid("08102b65-4b66-4dd0-926d-64488917c3a3"),
                            Code = "NO",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9159),
                            Name = "Norway",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9159)
                        },
                        new
                        {
                            Id = new Guid("47947286-8cce-4caa-8d34-8705d0f674ac"),
                            Code = "DK",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9161),
                            Name = "Denmark",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9162)
                        },
                        new
                        {
                            Id = new Guid("b3f63a37-c580-444c-863f-cb6eaaaf132e"),
                            Code = "IS",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9164),
                            Name = "Iceland",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9164)
                        },
                        new
                        {
                            Id = new Guid("5cdd1c84-fc02-4422-9f7c-8bde74a09b53"),
                            Code = "GB",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9166),
                            Name = "United Kingdom",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9166)
                        },
                        new
                        {
                            Id = new Guid("b8a7abe6-88af-449b-955b-198e2a3a09fa"),
                            Code = "IE",
                            CountryRegionCode = "EU",
                            CreatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9168),
                            Name = "Ireland",
                            UpdatedAt = new DateTime(2024, 7, 8, 11, 39, 29, 623, DateTimeKind.Utc).AddTicks(9168)
                        });
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BussinessEntityCreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailAddressPromotion")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BusinessEntityAdress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Address", "Address")
                        .WithMany("Adresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Adresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.BussinessEntitityCreditCard", b =>
                {
                    b.HasOne("Persons.Domain.Domain.CreditCard", "CreditCard")
                        .WithOne("BussinessEntitityCreditCard")
                        .HasForeignKey("Persons.Domain.Domain.BussinessEntitityCreditCard", "CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("CreditCards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditCard");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.EmailAddress", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithOne("EmailAddress")
                        .HasForeignKey("Persons.Domain.Domain.EmailAddress", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Password", b =>
                {
                    b.HasOne("Persons.Domain.Domain.Person", "Person")
                        .WithMany("Passwords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Address", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("Persons.Domain.Domain.Country", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Persons.Domain.Domain.CreditCard", b =>
                {
                    b.Navigation("BussinessEntitityCreditCard")
                        .IsRequired();
                });

            modelBuilder.Entity("Persons.Domain.Domain.Person", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("CreditCards");

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("Passwords");
                });
#pragma warning restore 612, 618
        }
    }
}
